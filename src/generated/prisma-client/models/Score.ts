
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Score` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Score
 * 
 */
export type ScoreModel = runtime.Types.Result.DefaultSelection<Prisma.$ScorePayload>

export type AggregateScore = {
  _count: ScoreCountAggregateOutputType | null
  _avg: ScoreAvgAggregateOutputType | null
  _sum: ScoreSumAggregateOutputType | null
  _min: ScoreMinAggregateOutputType | null
  _max: ScoreMaxAggregateOutputType | null
}

export type ScoreAvgAggregateOutputType = {
  id: number | null
  score: number | null
}

export type ScoreSumAggregateOutputType = {
  id: number | null
  score: number | null
}

export type ScoreMinAggregateOutputType = {
  id: number | null
  name: string | null
  score: number | null
  createdAt: Date | null
}

export type ScoreMaxAggregateOutputType = {
  id: number | null
  name: string | null
  score: number | null
  createdAt: Date | null
}

export type ScoreCountAggregateOutputType = {
  id: number
  name: number
  score: number
  createdAt: number
  _all: number
}


export type ScoreAvgAggregateInputType = {
  id?: true
  score?: true
}

export type ScoreSumAggregateInputType = {
  id?: true
  score?: true
}

export type ScoreMinAggregateInputType = {
  id?: true
  name?: true
  score?: true
  createdAt?: true
}

export type ScoreMaxAggregateInputType = {
  id?: true
  name?: true
  score?: true
  createdAt?: true
}

export type ScoreCountAggregateInputType = {
  id?: true
  name?: true
  score?: true
  createdAt?: true
  _all?: true
}

export type ScoreAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Score to aggregate.
   */
  where?: Prisma.ScoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scores to fetch.
   */
  orderBy?: Prisma.ScoreOrderByWithRelationInput | Prisma.ScoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ScoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Scores
  **/
  _count?: true | ScoreCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ScoreAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ScoreSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ScoreMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ScoreMaxAggregateInputType
}

export type GetScoreAggregateType<T extends ScoreAggregateArgs> = {
      [P in keyof T & keyof AggregateScore]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateScore[P]>
    : Prisma.GetScalarType<T[P], AggregateScore[P]>
}




export type ScoreGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScoreWhereInput
  orderBy?: Prisma.ScoreOrderByWithAggregationInput | Prisma.ScoreOrderByWithAggregationInput[]
  by: Prisma.ScoreScalarFieldEnum[] | Prisma.ScoreScalarFieldEnum
  having?: Prisma.ScoreScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ScoreCountAggregateInputType | true
  _avg?: ScoreAvgAggregateInputType
  _sum?: ScoreSumAggregateInputType
  _min?: ScoreMinAggregateInputType
  _max?: ScoreMaxAggregateInputType
}

export type ScoreGroupByOutputType = {
  id: number
  name: string
  score: number
  createdAt: Date
  _count: ScoreCountAggregateOutputType | null
  _avg: ScoreAvgAggregateOutputType | null
  _sum: ScoreSumAggregateOutputType | null
  _min: ScoreMinAggregateOutputType | null
  _max: ScoreMaxAggregateOutputType | null
}

type GetScoreGroupByPayload<T extends ScoreGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ScoreGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ScoreGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ScoreGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ScoreGroupByOutputType[P]>
      }
    >
  >



export type ScoreWhereInput = {
  AND?: Prisma.ScoreWhereInput | Prisma.ScoreWhereInput[]
  OR?: Prisma.ScoreWhereInput[]
  NOT?: Prisma.ScoreWhereInput | Prisma.ScoreWhereInput[]
  id?: Prisma.IntFilter<"Score"> | number
  name?: Prisma.StringFilter<"Score"> | string
  score?: Prisma.IntFilter<"Score"> | number
  createdAt?: Prisma.DateTimeFilter<"Score"> | Date | string
}

export type ScoreOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  score?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScoreWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ScoreWhereInput | Prisma.ScoreWhereInput[]
  OR?: Prisma.ScoreWhereInput[]
  NOT?: Prisma.ScoreWhereInput | Prisma.ScoreWhereInput[]
  name?: Prisma.StringFilter<"Score"> | string
  score?: Prisma.IntFilter<"Score"> | number
  createdAt?: Prisma.DateTimeFilter<"Score"> | Date | string
}, "id">

export type ScoreOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  score?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ScoreCountOrderByAggregateInput
  _avg?: Prisma.ScoreAvgOrderByAggregateInput
  _max?: Prisma.ScoreMaxOrderByAggregateInput
  _min?: Prisma.ScoreMinOrderByAggregateInput
  _sum?: Prisma.ScoreSumOrderByAggregateInput
}

export type ScoreScalarWhereWithAggregatesInput = {
  AND?: Prisma.ScoreScalarWhereWithAggregatesInput | Prisma.ScoreScalarWhereWithAggregatesInput[]
  OR?: Prisma.ScoreScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ScoreScalarWhereWithAggregatesInput | Prisma.ScoreScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Score"> | number
  name?: Prisma.StringWithAggregatesFilter<"Score"> | string
  score?: Prisma.IntWithAggregatesFilter<"Score"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Score"> | Date | string
}

export type ScoreCreateInput = {
  name: string
  score: number
  createdAt?: Date | string
}

export type ScoreUncheckedCreateInput = {
  id?: number
  name: string
  score: number
  createdAt?: Date | string
}

export type ScoreUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScoreUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScoreCreateManyInput = {
  id?: number
  name: string
  score: number
  createdAt?: Date | string
}

export type ScoreUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScoreUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScoreCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  score?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScoreAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
}

export type ScoreMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  score?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScoreMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  score?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScoreSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type ScoreSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  score?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["score"]>

export type ScoreSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  score?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["score"]>

export type ScoreSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  score?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["score"]>

export type ScoreSelectScalar = {
  id?: boolean
  name?: boolean
  score?: boolean
  createdAt?: boolean
}

export type ScoreOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "score" | "createdAt", ExtArgs["result"]["score"]>

export type $ScorePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Score"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    score: number
    createdAt: Date
  }, ExtArgs["result"]["score"]>
  composites: {}
}

export type ScoreGetPayload<S extends boolean | null | undefined | ScoreDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ScorePayload, S>

export type ScoreCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ScoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ScoreCountAggregateInputType | true
  }

export interface ScoreDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Score'], meta: { name: 'Score' } }
  /**
   * Find zero or one Score that matches the filter.
   * @param {ScoreFindUniqueArgs} args - Arguments to find a Score
   * @example
   * // Get one Score
   * const score = await prisma.score.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScoreFindUniqueArgs>(args: Prisma.SelectSubset<T, ScoreFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ScoreClient<runtime.Types.Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Score that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScoreFindUniqueOrThrowArgs} args - Arguments to find a Score
   * @example
   * // Get one Score
   * const score = await prisma.score.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScoreFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ScoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScoreClient<runtime.Types.Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Score that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoreFindFirstArgs} args - Arguments to find a Score
   * @example
   * // Get one Score
   * const score = await prisma.score.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScoreFindFirstArgs>(args?: Prisma.SelectSubset<T, ScoreFindFirstArgs<ExtArgs>>): Prisma.Prisma__ScoreClient<runtime.Types.Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Score that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoreFindFirstOrThrowArgs} args - Arguments to find a Score
   * @example
   * // Get one Score
   * const score = await prisma.score.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScoreFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ScoreFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScoreClient<runtime.Types.Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Scores that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoreFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Scores
   * const scores = await prisma.score.findMany()
   * 
   * // Get first 10 Scores
   * const scores = await prisma.score.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const scoreWithIdOnly = await prisma.score.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ScoreFindManyArgs>(args?: Prisma.SelectSubset<T, ScoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Score.
   * @param {ScoreCreateArgs} args - Arguments to create a Score.
   * @example
   * // Create one Score
   * const Score = await prisma.score.create({
   *   data: {
   *     // ... data to create a Score
   *   }
   * })
   * 
   */
  create<T extends ScoreCreateArgs>(args: Prisma.SelectSubset<T, ScoreCreateArgs<ExtArgs>>): Prisma.Prisma__ScoreClient<runtime.Types.Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Scores.
   * @param {ScoreCreateManyArgs} args - Arguments to create many Scores.
   * @example
   * // Create many Scores
   * const score = await prisma.score.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ScoreCreateManyArgs>(args?: Prisma.SelectSubset<T, ScoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Scores and returns the data saved in the database.
   * @param {ScoreCreateManyAndReturnArgs} args - Arguments to create many Scores.
   * @example
   * // Create many Scores
   * const score = await prisma.score.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Scores and only return the `id`
   * const scoreWithIdOnly = await prisma.score.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ScoreCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ScoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Score.
   * @param {ScoreDeleteArgs} args - Arguments to delete one Score.
   * @example
   * // Delete one Score
   * const Score = await prisma.score.delete({
   *   where: {
   *     // ... filter to delete one Score
   *   }
   * })
   * 
   */
  delete<T extends ScoreDeleteArgs>(args: Prisma.SelectSubset<T, ScoreDeleteArgs<ExtArgs>>): Prisma.Prisma__ScoreClient<runtime.Types.Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Score.
   * @param {ScoreUpdateArgs} args - Arguments to update one Score.
   * @example
   * // Update one Score
   * const score = await prisma.score.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ScoreUpdateArgs>(args: Prisma.SelectSubset<T, ScoreUpdateArgs<ExtArgs>>): Prisma.Prisma__ScoreClient<runtime.Types.Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Scores.
   * @param {ScoreDeleteManyArgs} args - Arguments to filter Scores to delete.
   * @example
   * // Delete a few Scores
   * const { count } = await prisma.score.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ScoreDeleteManyArgs>(args?: Prisma.SelectSubset<T, ScoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Scores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoreUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Scores
   * const score = await prisma.score.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ScoreUpdateManyArgs>(args: Prisma.SelectSubset<T, ScoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Scores and returns the data updated in the database.
   * @param {ScoreUpdateManyAndReturnArgs} args - Arguments to update many Scores.
   * @example
   * // Update many Scores
   * const score = await prisma.score.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Scores and only return the `id`
   * const scoreWithIdOnly = await prisma.score.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ScoreUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ScoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Score.
   * @param {ScoreUpsertArgs} args - Arguments to update or create a Score.
   * @example
   * // Update or create a Score
   * const score = await prisma.score.upsert({
   *   create: {
   *     // ... data to create a Score
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Score we want to update
   *   }
   * })
   */
  upsert<T extends ScoreUpsertArgs>(args: Prisma.SelectSubset<T, ScoreUpsertArgs<ExtArgs>>): Prisma.Prisma__ScoreClient<runtime.Types.Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Scores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoreCountArgs} args - Arguments to filter Scores to count.
   * @example
   * // Count the number of Scores
   * const count = await prisma.score.count({
   *   where: {
   *     // ... the filter for the Scores we want to count
   *   }
   * })
  **/
  count<T extends ScoreCountArgs>(
    args?: Prisma.Subset<T, ScoreCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ScoreCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Score.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ScoreAggregateArgs>(args: Prisma.Subset<T, ScoreAggregateArgs>): Prisma.PrismaPromise<GetScoreAggregateType<T>>

  /**
   * Group by Score.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScoreGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ScoreGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScoreGroupByArgs['orderBy'] }
      : { orderBy?: ScoreGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Score model
 */
readonly fields: ScoreFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Score.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScoreClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Score model
 */
export interface ScoreFieldRefs {
  readonly id: Prisma.FieldRef<"Score", 'Int'>
  readonly name: Prisma.FieldRef<"Score", 'String'>
  readonly score: Prisma.FieldRef<"Score", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Score", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Score findUnique
 */
export type ScoreFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
  /**
   * Filter, which Score to fetch.
   */
  where: Prisma.ScoreWhereUniqueInput
}

/**
 * Score findUniqueOrThrow
 */
export type ScoreFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
  /**
   * Filter, which Score to fetch.
   */
  where: Prisma.ScoreWhereUniqueInput
}

/**
 * Score findFirst
 */
export type ScoreFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
  /**
   * Filter, which Score to fetch.
   */
  where?: Prisma.ScoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scores to fetch.
   */
  orderBy?: Prisma.ScoreOrderByWithRelationInput | Prisma.ScoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Scores.
   */
  cursor?: Prisma.ScoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Scores.
   */
  distinct?: Prisma.ScoreScalarFieldEnum | Prisma.ScoreScalarFieldEnum[]
}

/**
 * Score findFirstOrThrow
 */
export type ScoreFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
  /**
   * Filter, which Score to fetch.
   */
  where?: Prisma.ScoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scores to fetch.
   */
  orderBy?: Prisma.ScoreOrderByWithRelationInput | Prisma.ScoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Scores.
   */
  cursor?: Prisma.ScoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Scores.
   */
  distinct?: Prisma.ScoreScalarFieldEnum | Prisma.ScoreScalarFieldEnum[]
}

/**
 * Score findMany
 */
export type ScoreFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
  /**
   * Filter, which Scores to fetch.
   */
  where?: Prisma.ScoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scores to fetch.
   */
  orderBy?: Prisma.ScoreOrderByWithRelationInput | Prisma.ScoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Scores.
   */
  cursor?: Prisma.ScoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scores.
   */
  skip?: number
  distinct?: Prisma.ScoreScalarFieldEnum | Prisma.ScoreScalarFieldEnum[]
}

/**
 * Score create
 */
export type ScoreCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
  /**
   * The data needed to create a Score.
   */
  data: Prisma.XOR<Prisma.ScoreCreateInput, Prisma.ScoreUncheckedCreateInput>
}

/**
 * Score createMany
 */
export type ScoreCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Scores.
   */
  data: Prisma.ScoreCreateManyInput | Prisma.ScoreCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Score createManyAndReturn
 */
export type ScoreCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
  /**
   * The data used to create many Scores.
   */
  data: Prisma.ScoreCreateManyInput | Prisma.ScoreCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Score update
 */
export type ScoreUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
  /**
   * The data needed to update a Score.
   */
  data: Prisma.XOR<Prisma.ScoreUpdateInput, Prisma.ScoreUncheckedUpdateInput>
  /**
   * Choose, which Score to update.
   */
  where: Prisma.ScoreWhereUniqueInput
}

/**
 * Score updateMany
 */
export type ScoreUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Scores.
   */
  data: Prisma.XOR<Prisma.ScoreUpdateManyMutationInput, Prisma.ScoreUncheckedUpdateManyInput>
  /**
   * Filter which Scores to update
   */
  where?: Prisma.ScoreWhereInput
  /**
   * Limit how many Scores to update.
   */
  limit?: number
}

/**
 * Score updateManyAndReturn
 */
export type ScoreUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
  /**
   * The data used to update Scores.
   */
  data: Prisma.XOR<Prisma.ScoreUpdateManyMutationInput, Prisma.ScoreUncheckedUpdateManyInput>
  /**
   * Filter which Scores to update
   */
  where?: Prisma.ScoreWhereInput
  /**
   * Limit how many Scores to update.
   */
  limit?: number
}

/**
 * Score upsert
 */
export type ScoreUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
  /**
   * The filter to search for the Score to update in case it exists.
   */
  where: Prisma.ScoreWhereUniqueInput
  /**
   * In case the Score found by the `where` argument doesn't exist, create a new Score with this data.
   */
  create: Prisma.XOR<Prisma.ScoreCreateInput, Prisma.ScoreUncheckedCreateInput>
  /**
   * In case the Score was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ScoreUpdateInput, Prisma.ScoreUncheckedUpdateInput>
}

/**
 * Score delete
 */
export type ScoreDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
  /**
   * Filter which Score to delete.
   */
  where: Prisma.ScoreWhereUniqueInput
}

/**
 * Score deleteMany
 */
export type ScoreDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Scores to delete
   */
  where?: Prisma.ScoreWhereInput
  /**
   * Limit how many Scores to delete.
   */
  limit?: number
}

/**
 * Score without action
 */
export type ScoreDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Score
   */
  select?: Prisma.ScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Score
   */
  omit?: Prisma.ScoreOmit<ExtArgs> | null
}
